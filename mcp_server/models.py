# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:45:00+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, EmailStr, Field, RootModel, confloat, constr


class Type(Enum):
    primary = 'primary'
    secondary = 'secondary'
    home = 'home'
    office = 'office'
    shipping = 'shipping'
    billing = 'billing'
    other = 'other'


class BadRequestResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Bad Request'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Invalid Params'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#requestvalidationerror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[400]
    )
    type_name: Optional[str] = Field(
        None,
        description='The type of error returned',
        examples=['RequestValidationError'],
    )


class Benefit(BaseModel):
    employee_deduction: Optional[float] = Field(
        None, description='The amount deducted for benefit.', examples=[142.94]
    )
    employer_contribution: Optional[float] = Field(
        None, description='The amount of employer contribution.', examples=[141.14]
    )
    name: Optional[str] = Field(
        None, description='The name of the benefit.', examples=['Health Insurance']
    )


class CompanyId(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The unique identifier of the company.',
        examples=['23456'],
        title='Company ID',
    )


class CompanyName(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The name of the company.',
        examples=['SpaceX'],
        title='Company name',
    )


class CreatedAt(RootModel[datetime]):
    root: datetime = Field(
        ...,
        description='The date and time when the object was created.',
        examples=['2020-09-30T07:43:32.000Z'],
        title='Created at (timestamp)',
    )


class CreatedBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The user who created the object.',
        examples=['12345'],
        title='Created by',
    )


class Currency(Enum):
    UNKNOWN_CURRENCY = 'UNKNOWN_CURRENCY'
    AED = 'AED'
    AFN = 'AFN'
    ALL = 'ALL'
    AMD = 'AMD'
    ANG = 'ANG'
    AOA = 'AOA'
    ARS = 'ARS'
    AUD = 'AUD'
    AWG = 'AWG'
    AZN = 'AZN'
    BAM = 'BAM'
    BBD = 'BBD'
    BDT = 'BDT'
    BGN = 'BGN'
    BHD = 'BHD'
    BIF = 'BIF'
    BMD = 'BMD'
    BND = 'BND'
    BOB = 'BOB'
    BOV = 'BOV'
    BRL = 'BRL'
    BSD = 'BSD'
    BTN = 'BTN'
    BWP = 'BWP'
    BYR = 'BYR'
    BZD = 'BZD'
    CAD = 'CAD'
    CDF = 'CDF'
    CHE = 'CHE'
    CHF = 'CHF'
    CHW = 'CHW'
    CLF = 'CLF'
    CLP = 'CLP'
    CNY = 'CNY'
    COP = 'COP'
    COU = 'COU'
    CRC = 'CRC'
    CUC = 'CUC'
    CUP = 'CUP'
    CVE = 'CVE'
    CZK = 'CZK'
    DJF = 'DJF'
    DKK = 'DKK'
    DOP = 'DOP'
    DZD = 'DZD'
    EGP = 'EGP'
    ERN = 'ERN'
    ETB = 'ETB'
    EUR = 'EUR'
    FJD = 'FJD'
    FKP = 'FKP'
    GBP = 'GBP'
    GEL = 'GEL'
    GHS = 'GHS'
    GIP = 'GIP'
    GMD = 'GMD'
    GNF = 'GNF'
    GTQ = 'GTQ'
    GYD = 'GYD'
    HKD = 'HKD'
    HNL = 'HNL'
    HRK = 'HRK'
    HTG = 'HTG'
    HUF = 'HUF'
    IDR = 'IDR'
    ILS = 'ILS'
    INR = 'INR'
    IQD = 'IQD'
    IRR = 'IRR'
    ISK = 'ISK'
    JMD = 'JMD'
    JOD = 'JOD'
    JPY = 'JPY'
    KES = 'KES'
    KGS = 'KGS'
    KHR = 'KHR'
    KMF = 'KMF'
    KPW = 'KPW'
    KRW = 'KRW'
    KWD = 'KWD'
    KYD = 'KYD'
    KZT = 'KZT'
    LAK = 'LAK'
    LBP = 'LBP'
    LKR = 'LKR'
    LRD = 'LRD'
    LSL = 'LSL'
    LTL = 'LTL'
    LVL = 'LVL'
    LYD = 'LYD'
    MAD = 'MAD'
    MDL = 'MDL'
    MGA = 'MGA'
    MKD = 'MKD'
    MMK = 'MMK'
    MNT = 'MNT'
    MOP = 'MOP'
    MRO = 'MRO'
    MUR = 'MUR'
    MVR = 'MVR'
    MWK = 'MWK'
    MXN = 'MXN'
    MXV = 'MXV'
    MYR = 'MYR'
    MZN = 'MZN'
    NAD = 'NAD'
    NGN = 'NGN'
    NIO = 'NIO'
    NOK = 'NOK'
    NPR = 'NPR'
    NZD = 'NZD'
    OMR = 'OMR'
    PAB = 'PAB'
    PEN = 'PEN'
    PGK = 'PGK'
    PHP = 'PHP'
    PKR = 'PKR'
    PLN = 'PLN'
    PYG = 'PYG'
    QAR = 'QAR'
    RON = 'RON'
    RSD = 'RSD'
    RUB = 'RUB'
    RWF = 'RWF'
    SAR = 'SAR'
    SBD = 'SBD'
    SCR = 'SCR'
    SDG = 'SDG'
    SEK = 'SEK'
    SGD = 'SGD'
    SHP = 'SHP'
    SLL = 'SLL'
    SOS = 'SOS'
    SRD = 'SRD'
    SSP = 'SSP'
    STD = 'STD'
    SVC = 'SVC'
    SYP = 'SYP'
    SZL = 'SZL'
    THB = 'THB'
    TJS = 'TJS'
    TMT = 'TMT'
    TND = 'TND'
    TOP = 'TOP'
    TRC = 'TRC'
    TRY = 'TRY'
    TTD = 'TTD'
    TWD = 'TWD'
    TZS = 'TZS'
    UAH = 'UAH'
    UGX = 'UGX'
    USD = 'USD'
    USN = 'USN'
    USS = 'USS'
    UYI = 'UYI'
    UYU = 'UYU'
    UZS = 'UZS'
    VEF = 'VEF'
    VND = 'VND'
    VUV = 'VUV'
    WST = 'WST'
    XAF = 'XAF'
    XAG = 'XAG'
    XAU = 'XAU'
    XBA = 'XBA'
    XBB = 'XBB'
    XBC = 'XBC'
    XBD = 'XBD'
    XCD = 'XCD'
    XDR = 'XDR'
    XOF = 'XOF'
    XPD = 'XPD'
    XPF = 'XPF'
    XPT = 'XPT'
    XTS = 'XTS'
    XXX = 'XXX'
    YER = 'YER'
    ZAR = 'ZAR'
    ZMK = 'ZMK'
    ZMW = 'ZMW'
    BTC = 'BTC'
    ETH = 'ETH'


class CustomField(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = Field(
        None,
        description='More information about the custom field',
        examples=['Employee Level'],
        title='Description',
    )
    id: str = Field(..., examples=['2389328923893298'], title='ID')
    name: Optional[str] = Field(
        None,
        description='Name of the custom field.',
        examples=['employee_level'],
        title='Name',
    )
    value: Optional[Union[str, float, bool, List[str]]] = None


class Deduction(BaseModel):
    amount: Optional[float] = Field(
        None, description='The amount deducted.', examples=[10.97]
    )
    name: Optional[str] = Field(
        None, description='The name of the deduction.', examples=['Company Car']
    )


class Description(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='A description of the object.',
        examples=['A description'],
        title='Description',
    )


class Division(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The division the person is currently in. Usually a collection of departments or teams or regions.',
        examples=['Europe'],
        title='Division',
    )


class Type1(Enum):
    primary = 'primary'
    secondary = 'secondary'
    work = 'work'
    personal = 'personal'
    billing = 'billing'
    other = 'other'


class Email(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    email: EmailStr = Field(..., examples=['elon@musk.com'])
    id: Optional[str] = Field(None, examples=['123'])
    type: Optional[Type1] = Field(None, examples=['primary'])


class FlsaStatus(Enum):
    exempt = 'exempt'
    salaried_nonexempt = 'salaried-nonexempt'
    nonexempt = 'nonexempt'
    owner = 'owner'


class SubType(Enum):
    full_time = 'full_time'
    part_time = 'part_time'
    hourly = 'hourly'


class Type2(Enum):
    contractor = 'contractor'
    employee = 'employee'
    freelance = 'freelance'
    temp = 'temp'
    internship = 'internship'
    other = 'other'


class EmploymentRole(BaseModel):
    sub_type: Optional[SubType] = Field(
        None,
        description='The work schedule of the employee.',
        title='Employment sub type',
    )
    type: Optional[Type2] = Field(
        None,
        description='The type of employment relationship the employee has with the organization.',
        title='Employment type',
    )


class LeavingReason(Enum):
    dismissed = 'dismissed'
    resigned = 'resigned'
    redundancy = 'redundancy'
    other = 'other'


class SocialLink(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Optional[str] = Field(None, examples=['12345'])
    type: Optional[str] = Field(None, examples=['twitter'])
    url: constr(min_length=1) = Field(
        ..., examples=['https://www.twitter.com/apideck-io']
    )


class Team(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Optional[str] = Field(
        None, description='The unique identifier of the team.', examples=['1234']
    )
    name: Optional[str] = Field(
        None, description='The name of the team.', examples=['Full Stack Engineers']
    )


class EmployeeNumber(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.',
        examples=['123456-AB'],
        title='Employee number',
    )


class EmploymentStatus(Enum):
    active = 'active'
    inactive = 'inactive'
    terminated = 'terminated'
    other = 'other'


class EmployeesFilter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    company_id: Optional[str] = Field(
        None, description='Company ID to filter on', examples=['1234']
    )
    department_id: Optional[str] = Field(
        None, description='ID of the department to filter on', examples=['1234']
    )
    email: Optional[str] = Field(
        None, description='Email to filter on', examples=['elon@tesla.com']
    )
    employee_number: Optional[str] = Field(
        None, description='Employee number to filter on', examples=['123456-AB']
    )
    employment_status: Optional[EmploymentStatus] = Field(
        None, description='Employment status to filter on', examples=['active']
    )
    first_name: Optional[str] = Field(
        None, description='First Name to filter on', examples=['Elon']
    )
    last_name: Optional[str] = Field(
        None, description='Last Name to filter on', examples=['Musk']
    )
    manager_id: Optional[str] = Field(
        None, description='Manager id to filter on', examples=['1234']
    )
    title: Optional[str] = Field(
        None, description='Job title to filter on', examples=['Manager']
    )


class By(Enum):
    first_name = 'first_name'
    last_name = 'last_name'
    created_at = 'created_at'
    updated_at = 'updated_at'


class FirstName(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The first name of the person.',
        examples=['Elon'],
        title='First name',
    )


class Gender(Enum):
    male = 'male'
    female = 'female'
    unisex = 'unisex'
    other = 'other'
    not_specified = 'not_specified'


class Status(Enum):
    active = 'active'
    inactive = 'inactive'
    trial = 'trial'
    other = 'other'


class HrisEventType(Enum):
    field_ = '*'
    hris_employee_created = 'hris.employee.created'
    hris_employee_updated = 'hris.employee.updated'
    hris_employee_deleted = 'hris.employee.deleted'
    hris_company_created = 'hris.company.created'
    hris_company_updated = 'hris.company.updated'
    hris_company_deleted = 'hris.company.deleted'


class Location(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Optional[str] = Field(None, examples=['HQ US'])


class Id(RootModel[str]):
    root: str = Field(
        ...,
        description='A unique identifier for an object.',
        examples=['12345'],
        title='ID',
    )


class Language(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='language code according to ISO 639-1. For the United States - EN',
        examples=['EN'],
    )


class LastName(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The last name of the person.',
        examples=['Musk'],
        title='Last name',
    )


class Links(BaseModel):
    current: Optional[str] = Field(
        None,
        description='Link to navigate to the current page through the API',
        examples=['https://unify.apideck.com/crm/companies'],
    )
    next: Optional[str] = Field(
        None,
        description='Link to navigate to the previous page through the API',
        examples=[
            'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM'
        ],
    )
    previous: Optional[str] = Field(
        None,
        description='Link to navigate to the previous page through the API',
        examples=[
            'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D'
        ],
    )


class Cursors(BaseModel):
    current: Optional[str] = Field(
        None,
        description='Cursor to navigate to the current page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjI='],
    )
    next: Optional[str] = Field(
        None,
        description='Cursor to navigate to the next page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjM='],
    )
    previous: Optional[str] = Field(
        None,
        description='Cursor to navigate to the previous page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjE='],
    )


class Meta(BaseModel):
    cursors: Optional[Cursors] = Field(
        None,
        description='Cursors to navigate to previous or next pages through the API',
    )
    items_on_page: Optional[int] = Field(
        None,
        description='Number of items returned in the data property of the response',
        examples=[50],
    )


class MiddleName(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='Middle name of the person.',
        examples=['D.'],
        title='Middle name',
    )


class NotFoundResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Not Found'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Unknown Widget'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#entitynotfounderror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[404]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['EntityNotFoundError']
    )


class NotImplementedResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Not Implemented'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Unmapped Attribute'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#mappingerror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[501]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['MappingError']
    )


class PaymentRequiredResponse(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
        examples=['You have reached your limit of 2000'],
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Payment Required'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Request Limit Reached'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#requestlimiterror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[402]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['RequestLimitError']
    )


class PaymentUnit(Enum):
    hour = 'hour'
    week = 'week'
    month = 'month'
    year = 'year'
    paycheck = 'paycheck'


class PayrollTotals(BaseModel):
    check_amount: Optional[float] = Field(
        None, description='The total check amount for the payroll.', examples=[27966.23]
    )
    company_debit: Optional[float] = Field(
        None,
        description='The total company debit for the payroll.',
        examples=[27992.49],
    )
    employee_benefit_deductions: Optional[float] = Field(
        None,
        description='The total amount of employee deducted benefits for the payroll.',
        examples=[0],
    )
    employee_taxes: Optional[float] = Field(
        None,
        description='The total amount of employee paid taxes for the payroll.',
        examples=[6616.39],
    )
    employer_benefit_contributions: Optional[float] = Field(
        None,
        description='The total amount of company contributed benefits for the payroll.',
        examples=[0],
    )
    employer_taxes: Optional[float] = Field(
        None,
        description='The total amount of employer paid taxes for the payroll.',
        examples=[2038.93],
    )
    gross_pay: Optional[float] = Field(
        None, description='The gross pay amount for the payroll.', examples=[27966.23]
    )
    net_pay: Optional[float] = Field(
        None, description='The net pay amount for the payroll.', examples=[19337.17]
    )
    tax_debit: Optional[float] = Field(
        None, description='The total tax debit for the payroll.', examples=[8655.32]
    )


class PayrollsFilter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    end_date: Optional[constr(pattern=r'^\d{4}-\d{2}-\d{2}$')] = Field(
        None,
        description='Return payrolls whose pay period is before the end date',
        examples=['2022-04-21'],
    )
    start_date: Optional[constr(pattern=r'^\d{4}-\d{2}-\d{2}$')] = Field(
        None,
        description='Return payrolls whose pay period is after the start date',
        examples=['2022-04-08'],
    )


class Type3(Enum):
    primary = 'primary'
    secondary = 'secondary'
    home = 'home'
    work = 'work'
    office = 'office'
    mobile = 'mobile'
    assistant = 'assistant'
    fax = 'fax'
    direct_dial_in = 'direct-dial-in'
    personal = 'personal'
    other = 'other'


class PhoneNumber(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    area_code: Optional[str] = Field(None, examples=['323'], title='Area code')
    country_code: Optional[str] = Field(None, examples=['1'], title='Country code')
    extension: Optional[str] = Field(None, examples=['105'], title='Phone extension')
    id: Optional[str] = Field(None, examples=['12345'])
    number: constr(min_length=1) = Field(
        ..., examples=['111-111-1111'], title='Phone number'
    )
    type: Optional[Type3] = Field(None, examples=['primary'])


class PhotoUrl(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The URL of the photo of a person.',
        examples=['https://unavatar.io/elon-musk'],
        title='Photo URL',
    )


class RowVersion(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.',
        examples=['1-12345'],
        title='Row version',
    )


class EvenWeeks(BaseModel):
    hours_friday: Optional[confloat(ge=0.0, le=24.0)] = Field(None, examples=[4])
    hours_monday: Optional[confloat(ge=0.0, le=24.0)] = Field(None, examples=[8])
    hours_saturday: Optional[confloat(ge=0.0, le=24.0)] = Field(None, examples=[0])
    hours_sunday: Optional[confloat(ge=0.0, le=24.0)] = Field(None, examples=[0])
    hours_thursday: Optional[confloat(ge=0.0, le=24.0)] = Field(None, examples=[7.5])
    hours_tuesday: Optional[confloat(ge=0.0, le=24.0)] = Field(None, examples=[8])
    hours_wednesday: Optional[confloat(ge=0.0, le=24.0)] = Field(None, examples=[4])


class OddWeeks(BaseModel):
    hours_friday: Optional[confloat(ge=0.0, le=24.0)] = Field(None, examples=[4])
    hours_monday: Optional[confloat(ge=0.0, le=24.0)] = Field(None, examples=[8])
    hours_saturday: Optional[confloat(ge=0.0, le=24.0)] = Field(None, examples=[0])
    hours_sunday: Optional[confloat(ge=0.0, le=24.0)] = Field(None, examples=[0])
    hours_thursday: Optional[confloat(ge=0.0, le=24.0)] = Field(None, examples=[7.5])
    hours_tuesday: Optional[confloat(ge=0.0, le=24.0)] = Field(None, examples=[8])
    hours_wednesday: Optional[confloat(ge=0.0, le=24.0)] = Field(None, examples=[4])


class WorkPattern(BaseModel):
    even_weeks: Optional[EvenWeeks] = None
    odd_weeks: Optional[OddWeeks] = None


class Schedule(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    end_date: constr(pattern=r'^\d{4}-\d{2}-\d{2}$') = Field(
        ...,
        description='The end date, inclusive, of the schedule period.',
        examples=['2022-04-21'],
    )
    id: Id
    start_date: constr(pattern=r'^\d{4}-\d{2}-\d{2}$') = Field(
        ...,
        description='The start date, inclusive, of the schedule period.',
        examples=['2022-04-08'],
    )
    work_pattern: WorkPattern


class SortDirection(Enum):
    asc = 'asc'
    desc = 'desc'


class Tax(BaseModel):
    amount: Optional[float] = Field(
        None, description='The amount of the tax.', examples=[1.97]
    )
    employer: Optional[bool] = Field(
        None, description='Paid by employer.', examples=[False]
    )
    name: Optional[str] = Field(
        None, description='The name of the tax.', examples=['CA State Income Tax']
    )


class Notes(BaseModel):
    employee: Optional[str] = Field(
        None, examples=['Relaxing on the beach for a few hours.'], title='Employee note'
    )
    manager: Optional[str] = Field(None, examples=['Enjoy!'], title='Manager note')


class RequestType(Enum):
    vacation = 'vacation'
    sick = 'sick'
    personal = 'personal'
    jury_duty = 'jury_duty'
    volunteer = 'volunteer'
    bereavement = 'bereavement'
    other = 'other'


class Status1(Enum):
    requested = 'requested'
    approved = 'approved'
    declined = 'declined'
    cancelled = 'cancelled'
    deleted = 'deleted'
    other = 'other'


class Units(Enum):
    days = 'days'
    hours = 'hours'
    other = 'other'


class TimeOffRequestStatus(Enum):
    requested = 'requested'
    approved = 'approved'
    declined = 'declined'
    cancelled = 'cancelled'
    deleted = 'deleted'
    other = 'other'


class TimeOffRequestsFilter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    employee_id: Optional[str] = Field(
        None, description='Employee ID', examples=['1234']
    )
    end_date: Optional[constr(pattern=r'^\d{4}-\d{2}-\d{2}$')] = Field(
        None, description='End date', examples=['2022-04-21']
    )
    start_date: Optional[constr(pattern=r'^\d{4}-\d{2}-\d{2}$')] = Field(
        None, description='Start date', examples=['2022-04-08']
    )
    time_off_request_status: Optional[TimeOffRequestStatus] = Field(
        None, description='Time off request status to filter on', examples=['']
    )


class Title(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The job title of the person.',
        examples=['CEO'],
        title='Job title',
    )


class Detail(BaseModel):
    context: Optional[str] = None
    error: Optional[Dict[str, Any]] = None


class TooManyRequestsResponse(BaseModel):
    detail: Optional[Detail] = None
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 6585)',
        examples=['Too Many Requests'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Connector Rate Limit Error'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#connectorratelimiterror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[429]
    )
    type_name: Optional[str] = Field(
        None,
        description='The type of error returned',
        examples=['ConnectorRateLimitError'],
    )


class UnauthorizedResponse(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
        examples=[
            'Failed to generate valid JWT Session. Verify applicationId is correct'
        ],
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Unauthorized'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Unauthorized Request'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#unauthorizederror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[401]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['UnauthorizedError']
    )


class UnexpectedErrorResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Bad Request'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Invalid Params'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#unauthorizederror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[400]
    )
    type_name: Optional[str] = Field(
        None,
        description='The type of error returned',
        examples=['RequestHeadersValidationError'],
    )


class UnifiedId(BaseModel):
    id: str = Field(
        ...,
        description='The unique identifier of the resource',
        examples=['12345'],
        title='Id',
    )


class UnprocessableResponse(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
        examples=[
            'Unprocessable request, please verify your request headers and body.'
        ],
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Unprocessable Entity'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Invalid State'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#invalidstateerror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[422]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['InvalidStateError']
    )


class UpdateDepartmentResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Departments']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['workday']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdateEmployeeResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Employees']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['sage-hr']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdateHrisCompanyResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Companies']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['undefined']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdateTimeOffRequestResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['time-off-requests']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['bamboohr']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdatedAt(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(
        None,
        description='The date and time when the object was last updated.',
        examples=['2020-09-30T07:43:32.000Z'],
        title='Updated at (timestamp)',
    )


class UpdatedBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The user who last updated the object.',
        examples=['12345'],
        title='Updated by',
    )


class WebhookEvent(BaseModel):
    entity_id: Optional[str] = Field(
        None,
        description="The service provider's ID of the entity that triggered this event",
        examples=['123456ASDF'],
    )
    entity_type: Optional[str] = Field(
        None,
        description='The type entity that triggered this event',
        examples=['Company'],
    )
    entity_url: Optional[str] = Field(
        None,
        description='The url to retrieve entity detail.',
        examples=['https://unify.apideck.com/crm/contacts/123456'],
    )
    event_id: Optional[str] = Field(
        None,
        description='Unique reference to this request event',
        examples=['9755c355-56c3-4a2f-a2da-86ff4411fccb'],
    )
    execution_attempt: Optional[float] = Field(
        None,
        description='The current count this request event has been attempted',
        examples=[2],
    )
    occurred_at: Optional[str] = Field(
        None,
        description='ISO Datetime for when the original event occurred',
        examples=['2021-10-01T03:14:55.419Z'],
    )
    service_id: Optional[str] = Field(
        None, description='Service provider identifier', examples=['close']
    )
    event_type: Optional[HrisEventType] = None


class Type4(Enum):
    primary = 'primary'
    secondary = 'secondary'
    work = 'work'
    personal = 'personal'
    other = 'other'


class Website(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Optional[str] = Field(None, examples=['12345'])
    type: Optional[Type4] = Field(None, examples=['primary'])
    url: constr(min_length=1) = Field(..., examples=['http://example.com'])


class Address(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    city: Optional[str] = Field(
        None, description='Name of city.', examples=['San Francisco']
    )
    contact_name: Optional[str] = Field(None, examples=['Elon Musk'])
    country: Optional[str] = Field(
        None,
        description='country code according to ISO 3166-1 alpha-2.',
        examples=['US'],
    )
    county: Optional[str] = Field(
        None,
        description='Address field that holds a sublocality, such as a county',
        examples=['Santa Clara'],
    )
    email: Optional[str] = Field(None, examples=['elon@musk.com'])
    fax: Optional[str] = Field(None, examples=['122-111-1111'])
    id: Optional[str] = Field(None, examples=['123'])
    latitude: Optional[str] = Field(None, examples=['40.759211'])
    line1: Optional[str] = Field(
        None,
        description='Line 1 of the address e.g. number, street, suite, apt #, etc.',
        examples=['Main street'],
    )
    line2: Optional[str] = Field(
        None, description='Line 2 of the address', examples=['apt #']
    )
    line3: Optional[str] = Field(
        None, description='Line 3 of the address', examples=['Suite #']
    )
    line4: Optional[str] = Field(
        None, description='Line 4 of the address', examples=['delivery instructions']
    )
    longitude: Optional[str] = Field(None, examples=['-73.984638'])
    name: Optional[str] = Field(None, examples=['HQ US'])
    phone_number: Optional[str] = Field(None, examples=['111-111-1111'])
    postal_code: Optional[str] = Field(
        None, description='Zip code or equivalent.', examples=['94104']
    )
    row_version: Optional[RowVersion] = None
    salutation: Optional[str] = Field(None, examples=['Mr'])
    state: Optional[str] = Field(None, description='Name of state', examples=['CA'])
    street_number: Optional[str] = Field(
        None, description='Street number', examples=['25']
    )
    string: Optional[str] = Field(
        None,
        examples=['25 Spring Street, Blackburn, VIC 3130'],
        title="The address string. Some APIs don't provide structured address data.",
    )
    type: Optional[Type] = Field(None, examples=['primary'])
    website: Optional[str] = Field(None, examples=['https://elonmusk.com'])


class Compensation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    benefits: Optional[List[Benefit]] = Field(
        None, description='An array of employee benefits for the pay period.'
    )
    deductions: Optional[List[Deduction]] = Field(
        None, description='An array of employee deductions for the pay period.'
    )
    employee_id: Id
    gross_pay: Optional[float] = Field(
        None,
        description="The employee's gross pay. Only available when payroll has been processed",
        examples=[3000],
    )
    net_pay: Optional[float] = Field(
        None,
        description="The employee's net pay. Only available when payroll has been processed",
        examples=[2199.93],
    )
    taxes: Optional[List[Tax]] = Field(
        None, description='An array of employer and employee taxes for the pay period.'
    )


class CreateDepartmentResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Departments']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['workday']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CreateEmployeeResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Employees']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['sage-hr']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CreateHrisCompanyResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Companies']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['undefined']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CreateTimeOffRequestResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['time-off-requests']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['bamboohr']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteDepartmentResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['delete'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Departments']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['workday']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteEmployeeResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['delete'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Employees']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['sage-hr']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteHrisCompanyResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['delete'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Companies']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['undefined']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteTimeOffRequestResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['delete'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['time-off-requests']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['bamboohr']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class Department(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    code: Optional[str] = Field(None, examples=['2'], title='Code')
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    description: Optional[str] = Field(None, examples=['R&D'], title='Description')
    id: Optional[Id] = None
    name: Optional[str] = Field(
        None, description='Department name', examples=['R&D'], title='Name'
    )
    parent_id: Optional[str] = Field(None, description='Parent ID', examples=['22345'])
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class Compensation1(BaseModel):
    currency: Optional[Currency] = None
    effective_date: Optional[str] = Field(
        None,
        description="The date on which a change to an employee's compensation takes effect.",
        examples=['2020-08-12'],
        title='Effective date',
    )
    flsa_status: Optional[FlsaStatus] = Field(
        None, description='The FLSA status for this compensation.'
    )
    id: Optional[Id] = None
    job_id: Optional[str] = Field(
        None,
        description='The ID of the job to which the compensation belongs.',
        examples=['12345'],
        title='Job ID',
    )
    payment_unit: Optional[PaymentUnit] = None
    rate: Optional[float] = Field(
        None,
        description='The amount paid per payment unit.',
        examples=[72000],
        title='Rate',
    )


class Job(BaseModel):
    compensation_rate: Optional[float] = Field(
        None,
        description='The rate of pay for the employee in their current job role.',
        examples=[72000],
        title='The compensation rate of the job.',
    )
    currency: Optional[Currency] = None
    employee_id: Optional[Id] = None
    end_date: Optional[date] = Field(
        None,
        description='The date on which the employee leaves or is expected to leave their current job role.',
        examples=['2020-08-12'],
        title='The end date of the job.',
    )
    hired_at: Optional[date] = Field(
        None,
        description='The date on which the employee was hired by the organization',
        examples=['2020-08-12'],
        title='Hired date',
    )
    id: Optional[Id] = None
    is_primary: Optional[bool] = Field(
        None,
        description="Indicates whether this the employee's primary job.",
        examples=[True],
        title='Primary',
    )
    location: Optional[Address] = None
    payment_unit: Optional[PaymentUnit] = None
    role: Optional[str] = Field(
        None,
        description='The position and responsibilities of the person within the organization.',
        examples=['Sales'],
        title='Job role',
    )
    start_date: Optional[date] = Field(
        None,
        description='The date on which the employee starts working in their current job role.',
        examples=['2020-08-12'],
        title='The start date of the job.',
    )
    title: Optional[Title] = None


class Manager(BaseModel):
    email: Optional[EmailStr] = Field(
        None,
        description='The email address of the manager.',
        examples=['elon@musk.com'],
        title='Email address',
    )
    employment_status: Optional[EmploymentStatus] = None
    first_name: Optional[FirstName] = None
    id: Optional[Id] = None
    last_name: Optional[LastName] = None
    name: Optional[str] = Field(
        None,
        description='The name of the manager, often a combination of their first and last names.',
        examples=['Elon Musk'],
        title='Manager name',
    )


class Partner(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    birthday: Optional[date] = Field(None, examples=['2000-08-12'])
    deceased_on: Optional[date] = Field(None, examples=['2000-08-12'])
    first_name: Optional[FirstName] = None
    gender: Optional[Gender] = None
    id: Optional[Id] = None
    initials: Optional[str] = Field(None, examples=['EM'], title='Initials')
    last_name: Optional[LastName] = None
    middle_name: Optional[MiddleName] = None


class Employee(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    addresses: Optional[List[Address]] = None
    birthday: Optional[date] = Field(
        None,
        description='The date of birth of the person.',
        examples=['2000-08-12'],
        title='Birth Date',
    )
    company_id: Optional[CompanyId] = None
    company_name: Optional[CompanyName] = None
    compensations: Optional[List[Compensation1]] = None
    country_of_birth: Optional[constr(min_length=2, max_length=2)] = Field(
        None,
        description='Country code according to ISO 3166-1 alpha-2.',
        examples=['US'],
        title='Country Code',
    )
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    custom_fields: Optional[List[CustomField]] = None
    deceased_on: Optional[date] = Field(
        None,
        description='The date the person deceased.',
        examples=['2000-08-12'],
        title='Deceased Date',
    )
    deleted: Optional[bool] = Field(None, examples=[True], title='Deleted')
    department: Optional[str] = Field(
        None,
        description='The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.',
        examples=['R&D'],
        title='Department',
    )
    department_id: Optional[str] = Field(
        None,
        description='Unique identifier of the department ID this employee belongs to.',
        examples=['12345'],
        title='Department ID',
    )
    department_name: Optional[str] = Field(
        None,
        description='Name of the department this employee belongs to.',
        examples=['12345'],
        title='Department Name',
    )
    description: Optional[Description] = None
    dietary_preference: Optional[str] = Field(
        None,
        description="Indicate the employee's dietary preference.",
        examples=['Veggie'],
        title='Dietary preference',
    )
    direct_reports: Optional[List[str]] = Field(
        None,
        description='The direct reports refer to the individuals who report directly to a person in the organizational hierarchy.',
        examples=[
            [
                'a0d636c6-43b3-4bde-8c70-85b707d992f4',
                'a98lfd96-43b3-4bde-8c70-85b707d992e6',
            ]
        ],
        title='Direct reports',
    )
    display_name: Optional[str] = Field(
        None,
        description='The name used to display the employee, often a combination of their first and last names.',
        examples=['Technoking'],
        title='Display name',
    )
    division: Optional[Division] = None
    division_id: Optional[str] = Field(
        None,
        description='Unique identifier of the division this employee belongs to.',
        examples=['12345'],
        title='Division ID',
    )
    emails: Optional[List[Email]] = None
    employee_number: Optional[EmployeeNumber] = None
    employment_end_date: Optional[str] = Field(
        None,
        description='An End Date is the date that the employee ended working at the company',
        examples=['2028-10-26'],
        title='Employee end date',
    )
    employment_role: Optional[EmploymentRole] = None
    employment_start_date: Optional[str] = Field(
        None,
        description='A Start Date is the date that the employee started working at the company',
        examples=['2021-10-26'],
        title='Employee start date',
    )
    employment_status: Optional[EmploymentStatus] = None
    first_name: Optional[FirstName] = None
    food_allergies: Optional[List[str]] = Field(
        None,
        description="Indicate the employee's food allergies.",
        examples=[['No allergies']],
        title='Food allergies',
    )
    gender: Optional[Gender] = None
    id: Id
    initials: Optional[str] = Field(
        None,
        description='The initials of the person, usually derived from their first, middle, and last names.',
        examples=['EM'],
        title='Initials',
    )
    jobs: Optional[List[Job]] = None
    languages: Optional[List[Language]] = None
    last_name: Optional[LastName] = None
    leaving_reason: Optional[LeavingReason] = Field(
        None,
        description='The reason because the employment ended.',
        examples=['resigned'],
    )
    manager: Optional[Manager] = None
    marital_status: Optional[str] = Field(
        None,
        description='The marital status of the employee.',
        examples=['married'],
        title='Marital status',
    )
    middle_name: Optional[MiddleName] = None
    nationalities: Optional[List[str]] = None
    partner: Optional[Partner] = Field(None, title='Person')
    phone_numbers: Optional[List[PhoneNumber]] = None
    photo_url: Optional[PhotoUrl] = None
    preferred_language: Optional[Language] = None
    preferred_name: Optional[str] = Field(
        None,
        description='The name the employee prefers to be addressed by, which may be different from their legal name.',
        examples=['Elon Musk'],
        title='Preferred name',
    )
    pronouns: Optional[str] = Field(
        None,
        description='The preferred pronouns of the person.',
        examples=['she,her'],
        title='Pronouns',
    )
    record_url: Optional[str] = Field(
        None, examples=['https://app.intercom.io/contacts/12345'], title='Record URL'
    )
    row_version: Optional[RowVersion] = None
    salutation: Optional[str] = Field(
        None,
        description="A formal salutation for the person. For example, 'Mr', 'Mrs'",
        examples=['Mr'],
    )
    social_links: Optional[List[SocialLink]] = None
    social_security_number: Optional[str] = Field(
        None,
        description='A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.',
        examples=['123456789'],
        title='Social Security Number',
    )
    source: Optional[str] = Field(
        None,
        description='When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.',
        examples=['lever'],
        title='Source',
    )
    source_id: Optional[str] = Field(
        None,
        description='Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).',
        examples=['12345'],
        title='Source ID',
    )
    tags: Optional[List[str]] = Field(None, examples=[['New']])
    tax_code: Optional[str] = Field(None, examples=['1111'], title='Tax Code')
    tax_id: Optional[str] = Field(None, examples=['234-32-0000'], title='Tax ID')
    team: Optional[Team] = Field(
        None, description='The team the person is currently in.'
    )
    timezone: Optional[str] = Field(
        None,
        description='The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.',
        examples=['Europe/London'],
        title='Timezone',
    )
    title: Optional[Title] = None
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None
    works_remote: Optional[bool] = Field(
        None,
        description='Indicates if the employee works from a remote location.',
        examples=[True],
        title='Remote',
    )


class EmployeeSchedules(BaseModel):
    employee: Optional[Employee] = None
    schedules: Optional[List[Schedule]] = None


class EmployeesSort(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    by: Optional[By] = Field(
        None,
        description='The field on which to sort the Employees',
        examples=['created_at'],
    )
    direction: Optional[SortDirection] = 'asc'


class GetDepartmentResponse(BaseModel):
    data: Department
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Departments']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['workday']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetDepartmentsResponse(BaseModel):
    data: List[Department]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Departments']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['workday']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetEmployeeResponse(BaseModel):
    data: Employee
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Employees']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['sage-hr']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetEmployeeSchedulesResponse(BaseModel):
    data: EmployeeSchedules
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Employees']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['sage-hr']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetEmployeesResponse(BaseModel):
    data: List[Employee]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Employees']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['sage-hr']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class HrisCompany(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    addresses: Optional[List[Address]] = None
    company_number: Optional[str] = Field(
        None,
        description='An Company Number, Company ID or Company Code, is a unique number that has been assigned to each company.',
        examples=['123456-AB'],
        title='Company number',
    )
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    debtor_id: Optional[constr(min_length=1)] = Field(None, examples=['12345'])
    deleted: Optional[bool] = Field(None, examples=[False])
    display_name: Optional[constr(min_length=1)] = Field(None, examples=['SpaceX'])
    emails: Optional[List[Email]] = None
    id: Optional[Id] = None
    legal_name: constr(min_length=1) = Field(..., examples=['SpaceX'])
    phone_numbers: Optional[List[PhoneNumber]] = None
    status: Optional[Status] = Field(None, examples=['active'])
    subdomain: Optional[constr(min_length=1)] = Field(None, examples=['company'])
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None
    websites: Optional[List[Website]] = None


class HrisJob(BaseModel):
    department: Optional[str] = Field(
        None, description='Department name', examples=['Brussels Office']
    )
    employee_id: Optional[str] = Field(None, description='Id of the employee')
    employment_status: Optional[EmploymentStatus] = None
    end_date: Optional[date] = Field(None, examples=['2020-08-12'])
    id: Optional[Id] = None
    is_primary: Optional[bool] = Field(
        None,
        description="Indicates whether this the employee's primary job.",
        examples=[True],
        title='Primary',
    )
    location: Optional[Location] = None
    start_date: Optional[date] = Field(None, examples=['2020-08-12'])
    title: Optional[Title] = None


class HrisJobs(BaseModel):
    employee: Optional[Employee] = None
    jobs: Optional[List[HrisJob]] = None


class Payroll(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    check_date: constr(pattern=r'^\d{4}-\d{2}-\d{2}$') = Field(
        ...,
        description='The date on which employees will be paid for the payroll.',
        examples=['2022-04-08'],
    )
    company_id: Optional[CompanyId] = None
    compensations: Optional[List[Compensation]] = Field(
        None, description='An array of compensations for the payroll.'
    )
    end_date: constr(pattern=r'^\d{4}-\d{2}-\d{2}$') = Field(
        ...,
        description='The end date, inclusive, of the pay period.',
        examples=['2022-04-21'],
    )
    id: Id
    processed: bool = Field(
        ...,
        description='Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated.',
        examples=[False],
    )
    processed_date: Optional[constr(pattern=r'^\d{4}-\d{2}-\d{2}$')] = Field(
        None, description='The date the payroll was processed.', examples=['2022-04-08']
    )
    start_date: constr(pattern=r'^\d{4}-\d{2}-\d{2}$') = Field(
        ...,
        description='The start date, inclusive, of the pay period.',
        examples=['2022-04-08'],
    )
    totals: Optional[PayrollTotals] = Field(
        None, description='The overview of the payroll totals.'
    )


class TimeOffRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    amount: Optional[float] = Field(
        None, description='The amount of time off requested.', examples=[3.5]
    )
    approval_date: Optional[constr(pattern=r'^\d{4}-\d{2}-\d{2}$')] = Field(
        None, description='The date the request was approved', examples=['2022-03-21']
    )
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    description: Optional[str] = Field(
        None,
        description='Description of the time off request.',
        examples=['Enjoying some sun.'],
        title='Description',
    )
    employee_id: Optional[str] = Field(
        None, description='ID of the employee', examples=['12345'], title='Employee ID'
    )
    end_date: Optional[constr(pattern=r'^\d{4}-\d{2}-\d{2}$')] = Field(
        None,
        description='The end date of the time off request.',
        examples=['2022-04-01'],
    )
    id: Optional[Id] = None
    notes: Optional[Notes] = None
    policy_id: Optional[str] = Field(
        None, description='ID of the policy', examples=['12345'], title='Policy ID'
    )
    request_date: Optional[constr(pattern=r'^\d{4}-\d{2}-\d{2}$')] = Field(
        None, description='The date the request was made.', examples=['2022-03-21']
    )
    request_type: Optional[RequestType] = Field(
        None, description='The type of request', examples=['vacation']
    )
    start_date: Optional[constr(pattern=r'^\d{4}-\d{2}-\d{2}$')] = Field(
        None,
        description='The start date of the time off request.',
        examples=['2022-04-01'],
    )
    status: Optional[Status1] = Field(
        None,
        description='The status of the time off request.',
        examples=['approved'],
        title='Status',
    )
    units: Optional[Units] = Field(
        None,
        description='The unit of time off requested. Possible values include: `hours`, `days`, or `other`.',
        examples=['hours'],
    )
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class EmployeePayroll(BaseModel):
    employee: Optional[Employee] = None
    payroll: Optional[Payroll] = None


class EmployeePayrolls(BaseModel):
    employee: Optional[Employee] = None
    payrolls: Optional[List[Payroll]] = None


class GetEmployeePayrollResponse(BaseModel):
    data: EmployeePayroll
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Companies']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['undefined']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetEmployeePayrollsResponse(BaseModel):
    data: EmployeePayrolls
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Employees']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['sage-hr']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetHrisCompaniesResponse(BaseModel):
    data: List[HrisCompany]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Companies']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['undefined']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetHrisCompanyResponse(BaseModel):
    data: HrisCompany
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Companies']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['undefined']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetHrisJobResponse(BaseModel):
    data: HrisJob
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Employees']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['sage-hr']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetHrisJobsResponse(BaseModel):
    data: HrisJobs
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Employees']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['sage-hr']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetPayrollResponse(BaseModel):
    data: Payroll
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Companies']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['undefined']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetPayrollsResponse(BaseModel):
    data: List[Payroll]
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Employees']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['sage-hr']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetTimeOffRequestResponse(BaseModel):
    data: TimeOffRequest
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['time-off-requests']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['bamboohr']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetTimeOffRequestsResponse(BaseModel):
    data: List[TimeOffRequest]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['time-off-requests']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['bamboohr']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )
